<!--
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!-- [START picker_hello_world] -->
<!DOCTYPE html>
<html>
  <head>
    <title>Picker API Quickstart</title>
    <meta charset="utf-8" />
    <style>
      /* Basic button styles */
      .drive-button {
        display: flex;
        align-items: center;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        background-color: #4285f4; /* Google blue */
        color: white;
        font-size: 16px;
        font-family: Arial, sans-serif;
        cursor: pointer;
        transition: background-color 0.3s;
      }

      /* Google Drive logo */
      .drive-button img {
        width: 24px;
        height: 24px;
        margin-right: 10px;
      }

      /* Hover effect */
      .drive-button:hover {
        background-color: #357ae8; /* Darker blue */
      }

      /* Focus effect */
      .drive-button:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(66, 133, 244, 0.5);
      }

      p {
        font-size: larger;
      }

      .card {
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        margin: 20px 0;
        overflow: hidden;
        background-color: #fff;
        max-width: 600px;
      }

      .card-thumbnail {
        width: 120px;
        height: 120px;
        object-fit: cover;
      }

      .card-content {
        padding: 15px;
        flex-grow: 1;
      }

      .card-title {
        font-size: 18px;
        font-weight: 500;
        margin: 0 0 10px;
      }

      .card-info {
        font-size: 14px;
        color: #666;
        margin: 0;
      }
      #selected-files {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
      }
    </style>
  </head>
  <body>
    <p>
      Select file from google drive for channel: <b>winrate-demo-channel</b>
    </p>

    <!--Add buttons to initiate auth sequence and sign out-->
    <button
      id="authorize_button"
      class="drive-button"
      onclick="handleAuthClick()"
    >
      <img
        src="https://ssl.gstatic.com/images/branding/product/1x/drive_2020q4_48dp.png"
        alt="Google Drive Logo"
      />
      Open Google Drive
    </button>
    <!-- <button id="authorize_button" onclick="handleAuthClick()">
      Connect to Google Drive
    </button> -->

    <br />

    <button
      id="signout_button"
      class="drive-button"
      onclick="handleSignoutClick()"
    >
      Sign Out
    </button>

    <pre id="content" style="white-space: pre-wrap"></pre>

    <div id="selected-files"></div>

    <script type="text/javascript">
      /* exported gapiLoaded */
      /* exported gisLoaded */
      /* exported handleAuthClick */
      /* exported handleSignoutClick */

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      const SCOPES = "https://www.googleapis.com/auth/drive.metadata.readonly";

      // TODO(developer): Set to client ID and API key from the Developer Console
      const CLIENT_ID =
        "733467008063-p4tcnr9has6ap46afodgb8g109tj1hon.apps.googleusercontent.com";
      const API_KEY = "AIzaSyD1i9rwsmsBhtoxfpSJyD0Idk16-Ke28zI";

      // TODO(developer): Replace with your own project number from console.developers.google.com.
      const APP_ID = "733467008063";

      let tokenClient;
      let accessToken = null;
      let pickerInited = false;
      let gisInited = false;

      document.getElementById("authorize_button").style.visibility = "hidden";
      document.getElementById("signout_button").style.visibility = "hidden";

      /**
       * Callback after api.js is loaded.
       */
      function gapiLoaded() {
        gapi.load("client:picker", initializePicker);
      }

      /**
       * Callback after the API client is loaded. Loads the
       * discovery doc to initialize the API.
       */
      async function initializePicker() {
        await gapi.client.load(
          "https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"
        );
        pickerInited = true;
        maybeEnableButtons();
      }

      /**
       * Callback after Google Identity Services are loaded.
       */
      function gisLoaded() {
        tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: SCOPES,
          callback: "", // defined later
        });
        console.log("Token:::::::::::::", tokenClient);
        gisInited = true;
        maybeEnableButtons();
      }

      /**
       * Enables user interaction after all libraries are loaded.
       */
      function maybeEnableButtons() {
        if (pickerInited && gisInited) {
          document.getElementById("authorize_button").style.visibility =
            "visible";
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick() {
        tokenClient.callback = async (response) => {
          console.log("Callback response ::::::::", response);
          if (response.error !== undefined) {
            throw response;
          }
          accessToken = response.access_token;
          document.getElementById("signout_button").style.visibility =
            "visible";
          document.getElementById("authorize_button").innerText = "Refresh";
          await createPicker();
        };

        if (accessToken === null) {
          // Prompt the user to select a Google Account and ask for consent to share their data
          // when establishing a new session.
          tokenClient.requestAccessToken({ prompt: "consent" });
        } else {
          // Skip display of account chooser and consent dialog for an existing session.
          tokenClient.requestAccessToken({ prompt: "" });
        }
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick() {
        if (accessToken) {
          accessToken = null;
          google.accounts.oauth2.revoke(accessToken);
          document.getElementById("content").innerText = "";
          document.getElementById("authorize_button").innerText = "Authorize";
          document.getElementById("signout_button").style.visibility = "hidden";
        }
      }

      /**
       *  Create and render a Picker object for searching images.
       */
      function createPicker() {
        console.log(
          "createPicker  google.picker.ViewId:",
          google.picker.ViewId
        );
        const view = new google.picker.View(google.picker.ViewId.DOCS);
        // view.setMimeTypes("image/png,image/jpeg,image/jpg");
        const picker = new google.picker.PickerBuilder()
          .addView(google.picker.ViewId.DOCS) // You can customize views here
          .setOAuthToken(gapi.auth.getToken().access_token)
          .setDeveloperKey(API_KEY)
          .setCallback(pickerCallback)
          .build();
        picker.setVisible(true);
      }

      /**
       * Displays the file details of the user's selection.
       * @param {object} data - Containers the user selection from the picker
       */
      async function pickerCallback(data) {
        console.log(
          "pickerCallback  google.picker.Action:",
          google.picker.Action
        );
        if (
          data[google.picker.Response.ACTION] === google.picker.Action.PICKED
        ) {
          console.log("pickerCallback  data:", data);
          /*  let text = `Picker response: \n${JSON.stringify(data, null, 2)}\n`;
          const document = data[google.picker.Response.DOCUMENTS][0];
          const fileId = document[google.picker.Document.ID];
          console.log(fileId);
          const res = await gapi.client.drive.files.get({
            fileId: fileId,
            fields: "*",
          });
          console.log("pickerCallback  res:", res);
          text += `Drive API response for first document: \n${JSON.stringify(
            res.result,
            null,
            2
          )}\n`;
          window.document.getElementById("content").innerText = text; */
          const pickedDocument = data[google.picker.Response.DOCUMENTS][0];
          const fileId = pickedDocument[google.picker.Document.ID];
          console.log("pickerCallback  fileId:", fileId);
          // const res = await gapi.client.drive.files.get({
          //   fileId: fileId,
          //   fields: "*",
          // });
          // console.log("pickerCallback  res:", res);
          const elements = [
            {
              type: "text",
              text: "John Doe",
              style: {
                bold: true,
                italic: true,
              },
            },
            {
              type: "text",
              text: " attached document from the ",
              style: {
                italic: true,
              },
            },
            {
              type: "text",
              text: "Google Drive.\n",
              style: {
                bold: true,
                italic: true,
              },
            },
          ];
          const urls = [];
          const element = data.docs[0];
          const endpoint = `https://www.googleapis.com/drive/v3/files/${fileId}?fields=thumbnailLink,name,owners,modifiedTime&key=${API_KEY}`;
          const response = await fetch(endpoint);
          const responseData = await response.json();
          console.log("pickerCallback  responseData:", responseData);
          const metadata = {
            title: responseData.name,
            thumbnail: responseData.thumbnailLink,
            owner: responseData.owners
              ? responseData.owners[0].displayName
              : "Unknown Owner",
            modified: new Date(responseData.modifiedTime).toLocaleString(),
          };
          console.log("pickerCallback  metadata:", metadata);
          // data.docs.forEach((element) => {
          // Create card elements
          const card = document.createElement("div");
          card.classList.add("card");

          const thumbnail = document.createElement("img");
          thumbnail.classList.add("card-thumbnail");
          thumbnail.src = metadata.thumbnail;
          thumbnail.alt = "Document Thumbnail";

          const cardContent = document.createElement("div");
          cardContent.classList.add("card-content");

          const title = document.createElement("h3");
          title.classList.add("card-title");
          title.textContent = metadata.title;

          const ownerInfo = document.createElement("p");
          ownerInfo.classList.add("card-info");
          ownerInfo.innerHTML = `Owner: <span>${metadata.owner}</span>`;

          const modifiedInfo = document.createElement("p");
          modifiedInfo.classList.add("card-info");
          modifiedInfo.innerHTML = `Last Modified: <span>${metadata.modified}</span>`;

          // Append elements to card content
          cardContent.appendChild(title);
          cardContent.appendChild(ownerInfo);
          cardContent.appendChild(modifiedInfo);

          // Append thumbnail and card content to card
          card.appendChild(thumbnail);
          card.appendChild(cardContent);
          document.getElementById("selected-files").appendChild(card);
          document
            .getElementById("selected-files")
            .appendChild(document.createElement("br"));
          document
            .getElementById("selected-files")
            .appendChild(document.createElement("br"));

          urls.push({ url: element.embedUrl, name: element.name });
          elements.push({
            type: "link",
            url: element.embedUrl,
            text: element.name,
            style: {
              italic: true,
            },
          });
          // });
          const blocks = [
            {
              type: "rich_text",
              elements: [
                {
                  type: "rich_text_quote",
                  elements,
                },
              ],
            },
          ];

          const raw = JSON.stringify({
            channel: "C07BB6Z1BTP",
            blocks,
            urls,
            filename: data.docs[0].name,
            fileId: data.docs[0].id,
            mimeType: data.docs[0].mimeType,
          });
          const myHeaders = new Headers();
          myHeaders.append("Content-Type", "application/json");

          fetch("/api/send-message", {
            method: "POST",
            body: raw,
            headers: myHeaders,
            redirect: "follow",
          })
            .then(async (res) => await res.json())
            .then((result) => {
              console.log("pickerCallback  result:", result);
              alert("Document attached successfully!");
            })
            .catch((error) => {
              console.log("pickerCallback  error:", error);
            });
        }
      }
    </script>
    <script
      async
      defer
      src="https://apis.google.com/js/api.js"
      onload="gapiLoaded()"
    ></script>
    <script
      async
      defer
      src="https://accounts.google.com/gsi/client"
      onload="gisLoaded()"
    ></script>
  </body>
</html>
<!-- [END picker_hello_world] -->
